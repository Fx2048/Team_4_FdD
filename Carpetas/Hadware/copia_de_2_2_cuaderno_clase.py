# -*- coding: utf-8 -*-
"""Copia de 2.2 Cuaderno Clase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IiEmbgLNmbAo1p283IBCZybSt7VBsgMx

### Variables, lectura de entradas, salida de entradas

Una variable es un nombre que se refiere a un valor.
"""

mensaje = 'Hola python!'
type(mensaje)

edad_universo = 14.00000000
type(edad_universo)

"""**Declaración de asignación**

```
 < variable> = <expresión>
```

Las variables a menudo se describen como cajas en los que puede almacenar valores. Es mucho mejor pensar en las variables como etiquetas que puede asignar a los valores. También puede decir que una variable hace referencia a un determinado valor.

**Asignación Múltiple**

Puede asignar valores a más de una variable usando una sola línea.
"""

x, y , z = 3, 3.4, "bee"

x



"""**Practica**

Escriba un programa separado para realizar cada uno de estos ejercicios. Guarde cada programa con un nombre de archivo que siga las convenciones estándar de Python, usando letras minúsculas y guiones bajos, como `mensaje_simple.py` y `mensajes_simples.py`.

* Mensaje simple: asigne un mensaje a una variable y luego imprima ese mensaje.

* Mensajes simples: asigne un mensaje a una variable e imprima ese mensaje. Luego cambie el valor de la variable a un nuevo mensaje e imprima el nuevo mensaje.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile anona.py
# 
# saludo = "hola amigos"
# print("Este es un saludo de cortesia: ", saludo)

# Commented out IPython magic to ensure Python compatibility.
# %run anona

# Commented out IPython magic to ensure Python compatibility.
# %%writefile olala.py
# 
# mensaje1 = "Buenos dias"
# 
# print("Este es un saludo primordial: ", mensaje1)
# 
# mensaje1 = "Hasta luego"
# 
# print("Este es un salduo de despidada: ", mensaje1)

# Commented out IPython magic to ensure Python compatibility.
# %run olala

# Commented out IPython magic to ensure Python compatibility.
# %%writefile adonn.py
# mensaje = input("Mensaje de cortesia: ")
# print("Esto es un gesto de cortesia: ", mensaje)

# Commented out IPython magic to ensure Python compatibility.
# %run adonn

x = eval(input("ingresa un valor: "))

x == 5.4

x == "5.4"

edad = 6.35684534325498459665
print("{:.6f}".format(edad))

nombre = "Abejita"
edad = 6
print("{} tiene {} años".format(nombre,edad))

"""**Antes de resolver el ejercicio**

* Conocemos las cadenas y podemos usar una cadena para almacenar la línea de palabras.

* Conocemos el método `count` de cadenas, que podemos usar para contar el número de espacios en la línea de palabras. Eso nos da uno menos que el valor de salida que necesitamos.

* Conocemos los números enteros, usamos el operador `+` para sumar `1` a un número.

* Conocemos las variables y la declaración de asignación, que nos ayudan a referencias los valores para no perderlos.

#### Ejercicio 1

Cuenta el número de palabras proporcionadas. Para este problema, una `palabra` es cualquier secuencia de letras minúsculas. Por ejemplo, `hola` es una palabra, pero también son `palabras`  espresiones como `bbaabbb`.

**Entrada**

La entrada es una línea de texto, que consta de letras minúsculas y espacios. Hay exactamente un espacio entre cada par de palabras, y no hay espacios antes de la primera palabra ni después de la última palabra.

La longitud máxima de la línea es de 80 caracteres.

**Salida**

Muestra el número de palabras en la línea de entrada.

**Prueba**

* Entrada `Abejita es astronauta`
* Salida 3
* Entrada `El Leñador de Hojalata del mundo de OZ`
* Salida 8.
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile conteo_palabras.py
# linea = input("Ingrese una palabra: ")
# total_palabras = linea.count(" ") + 1
# print("Este es el numero de letras en esta palabra:", total_palabras)

# Commented out IPython magic to ensure Python compatibility.
# %run conteo_palabras

"""## Lectura de entradas


Para leer una línea de entrada, usamos la función **input**. Una función es similar a un **método**: la llamamos, quizás con algunos argumentos, y nos devuelve un valor.

Una diferencia entre un método y una función es que una función no usa el operador punto. Toda la información que se pasa a las funciones es a través de **argumentos**.

Si espera que el usuario ingrese un valor que no es una cadena, debes pedirle explícitamente a Python que evalúe lo que el usuario escribe como una expresión de Python usando la función `eval()` o puedes usar `cast` para hacer la conversión.
"""

#eval( '3' )
#eval( '3 + 4' )
#eval( 'len([3, 5, 7, 9])' )


s = 'Buenas tardes'
hola = len(s)
print(hola)

"""La función `eval()` se puede usar junto con la función `input()` cuando esperamos que el usuario escriba una expresión (un número, una lista, etc.) cuando se le solicite.

**Ejercicio 2**

Escriba un programa que le pida al usuario que ingrese la longitud y el ancho de una habitación. Una vez los valores han sido leídos, su programa debe calcular y mostrar el área de habitación. La longitud y el ancho se ingresarán como números de coma flotante. Incluir unidades en su mensaje de solicitud y salida; ya sea pies o metros, dependiendo de qué unidad con la que se siente más cómodo trabajando.

**Entrada**

Ingresa el largo y el ancho de la habitación

**Salida**

Se calcula el área de la habitación

**Sugerencia**

* Puedes usar `float(input(' ' ) ` o la función `eval()`.

**Prueba**

* largo = 3.5
* ancho = 1.2

* area = 4.2
"""

# Commented out IPython magic to ensure Python compatibility.
# ### Tu respuesta
# %%writefile area_habitacion.py
# largo = float(input("Ingresa el largo de la habitacion: "))
# 
# 
# ancho = float(input("Ingresa el ancho de la habitacion: "))
# 
# 
# area = largo*ancho
# 
# 
# print("El area de la habitacion es: ", area)
# 
# 
# print("El area recudido:", "{:.3f}".format(area))
# 
#

# Commented out IPython magic to ensure Python compatibility.
# %run area_habitacion

"""#### Ejercicio 3

Escriba un programa que lea un entero positivo, `n`, del usuario y luego muestre el suma de todos los enteros de `1` a `n`.
La suma de los primeros `n` enteros positivos puede ser calculado usando la fórmula: `(n)(n+1)/2`.

**Entrada**

Ingresa un entero positivo

**Salida**

Calcula la suma de los elementos

**Sugerencia**

* Puedes usar `int(input(' ' ) ` o la función `eval()`.

**Prueba**

* número = 2, suma = 3

* número = 8, suma = 36
"""

# Commented out IPython magic to ensure Python compatibility.
# ## Tu respuesta
# %%writefile conteo_numeros.py
# n = int(input("Ingresa un numero entero: "))
# suma = int((n)*(n+a)/(2))
# print("La suma es: ", suma)
#

# Commented out IPython magic to ensure Python compatibility.
# %run conteo_numeros

"""### Escritura de salidas

Debemos usar explícitamente la función **print** cada vez que queramos generar algo.

"""

print('abc'.upper())

"""**Imprimiendo objetos de python**"""

lista = [1,2,3]
tupla = ("A","B")
cadena = "Abejita"
print(lista, tupla, cadena)

"""**`str.format()`**

En este sistema los campos de reemplazo se indican con llaves.
"""

nombre= "Kappu"
edad = 11
print("{} tiene {} años ".format(nombre, edad))

a = 2
b = "Inspectora Motita"
c = 3.59157

print("{} es un entero, {} es una cadena y {} es un flotante.".format(a,b, c))

"""Es importante dar formato a números flotantes a un ancho fijo usando la especificación de formato y el método ` format()`."""

num = 0.02893574
print ("{:.4f}".format(num))

lista = [18.292164, 52.452189, 999.1212732]
for numeros in lista:
    print("{:.3f}".format(numeros))

"""También tenemos un signo de porcentaje `(%)` que puedes usar para imprimir los valores de las variables.

Como argumento de formato, esto también tiene un concepto de **marcadores de posición**. Sin embargo, a diferencia de la función `format`  en la que pasa solo los números de índice, aquí también debe especificar el tipo de datos que debe esperar el marcador de posición.

* `%d` se utiliza como marcador de posición para valores numéricos o decimales.

* `%f` se utiliza como marcador de posición para valores flotantes

* `%s` se utiliza como marcador de posición para cadenas.
"""

a = 2
b = "Inspectora Motita"
c = 3.5

print("%d es un entero, %s es una cadena y %.1f es un flotante."%(a,b, c))

"""**Ejercicio 4**

Imagina que acabas de abrir una nueva cuenta de ahorros que genera un interés del `4%` por año. El interés que gana se paga al final del año y se agrega al saldo de la cuenta de ahorro.
Escriba un programa que comience leyendo el cantidad de dinero depositada en la cuenta del usuario. Entonces su programa debería calcule y muestre el monto en la cuenta de ahorros después de `1`, `2` y `3` años. Monitorea cada cantidad para que se redondee a `2` decimales.

**Entrada**

Ingresa un entero positivo

**Salida**

Calcula las cuentas de los 3 primeros años.

**Sugerencia**

* Puedes usar `float(input() ` o la función `eval()`.

**Prueba**

* número = 330.5, total de cuentas = 343.72, 357.47, 371.77

* número = 250 , total de cuentas = 260.00 270.40, 281.22
"""

# Commented out IPython magic to ensure Python compatibility.
# ## Tu respuesta
# %%writefile tasa_interes.py
# interes = 0.04
# deposito = float(input("Ingresa la cantidad a depositar: "))
# año1 = deposito*interes
# año1total1 = año1 + deposito
# print("El total de tu cuenta en este año es: %.2f" %año1total1)
# 
# año2 = año1total1 * interes
# año2total2 = año1total1 + año2
# print("El total de tu cuenta en este año es: %.2f" %año2total2)
# 
# año3 = año2total2 * interes
# año3total3 = año2total2 + año3
# print("El total de tu cuenta en este año es: %.2f" %año3total3)

# Commented out IPython magic to ensure Python compatibility.
# %run tasa_interes

"""####  Ejercicio 5


**Entrada**

La entrada consta de dos líneas de texto. La primera línea contiene el número entero `r`, el radio del cono. La segunda línea contiene el entero `h`, la altura del cono. Tanto `r` como `h` están entre 1 y 100. (Es decir, el valor mínimo para `r` y `h`es 1 y el valor máximo es 100).

**Salida**

Dar la salida al volumen del cono circular recto con radio `r` y altura `h`. La fórmula para calcular el volumen es $(\pi r^2h)/3$.

**Prueba**

* Entrada `2 4`    

* Salida 16.755160819145562

* Entrada `3 6`

* Salida 56.548667764616276

Para este ejercicio Aquí hay una declaración de asignación de PI con mucha precisión en su valor:

`PI = 3.141592653589793`

Esto es más una **constante** que una variable, ya que nunca queremos cambiar el valor de `PI` en nuestro código.

Sugerencia: restringe tu respuesta a dos decimales tu respuesta.

`print("{:.2f}".format(volumen))`.

"""

# Commented out IPython magic to ensure Python compatibility.
# # Tu respuesta
# %%writefile Entrada.py
# r = int(input("Ingresa el radio del cono: "))
# h = int(input("Ingresa la altura del cono: "))
# PI = 3.141592653589793
# volumen = (((PI) * ((r)**2) * (h))/3)
# print("Este es el volumen del cono: ", volumen)
# print("Respuesta restringida a  dos decimales", "{:.2f}".format(volumen))

# Commented out IPython magic to ensure Python compatibility.
# %run Entrada

"""**Adicional**

`Zen of Python:`  

Ingrese `import this` en una sesión de terminal de Python y hojee los principios adicionales.

[Revisa: Zen de python](https://es.wikipedia.org/wiki/Zen_de_Python)
"""

## import this

